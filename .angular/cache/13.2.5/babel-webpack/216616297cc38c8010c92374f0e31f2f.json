{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Plugins } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nconst {\n  Storage\n} = Plugins;\nexport let StorageService = /*#__PURE__*/(() => {\n  class StorageService {\n    constructor() {}\n\n    store(storageKey, value) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encryptedValue = btoa(escape(JSON.stringify[value]));\n        yield Storage.set({\n          key: storageKey,\n          value: value\n        });\n      });\n    }\n\n    get(storageKey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield Storage.get({\n          key: storageKey\n        });\n\n        if (res.value) {\n          return JSON.parse(unescape(atob(res.value)));\n        } else {\n          return false;\n        }\n      });\n    }\n\n    removeItem(storageKey) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Storage.remove({\n          key: storageKey\n        });\n      });\n    }\n\n    clear() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Storage.clear();\n      });\n    }\n\n    storeCurrentUser(user_id) {\n      localStorage.setItem('user_id', JSON.stringify(user_id));\n    }\n\n    getCurrentUser() {\n      return localStorage.getItem('user_id');\n    }\n\n    clearCurrentUser() {\n      localStorage.clear();\n    }\n\n  }\n\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)();\n  };\n\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return StorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}